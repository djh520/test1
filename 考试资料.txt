1.什么是时间委托机制和垃圾回收机制
一个源产生的事件并将他给到一个或者多个监听器，直到事件被接收，监听器将会处理这个事件，并返回
垃圾收集是将分配给对象但不在使用的内存或者释放的过程，如果一个对象没用指向他的引用或者其赋值为ull，那么此对象适合进行垃圾回收


3.写4个oracle系统异常
	空异常，
	自定义异常
	多条返回异常
	特殊异常
	重复异常
                zero_divide 除数为零

4.写8个oracle时间函数
	to_char
	sysdate
	to_date
	newt_day
	year
	month
	day
	Hour


5.写一个游标dome
   declare 
   	current cur_aa is
 	select wage from teachers
	gongzi teachaers%type
begin 
	open cur_aa;
	loop
	fetch wage into cur_aa;
	exit  when cur_aa%NONfound;
end loop
end


6.写4个linux进程指令
    ps a 显示终端机下的所有程序，包括其他用户的程序。
    ps -A 显示所有程序。
    ps c 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。
    ps e 列出程序时，显示每个程序所使用的环境变量。
    ps f 用ASCII字符显示树状结构，表达程序间的相互关系。
    ps -H 显示树状结构，表示程序间的相互关系。
    ps s 采用程序信号的格式显示程序状况。
    ps S 列出程序时，包括已中断的子程序资料。
    ps -t<终端机编号> 指定终端机编号，并列出属于该终端机的程序的状况。
    ps u 以用户为主的格式来显示程序状况。
    ps x 显示所有程序，不以终端机来区分。

7.什么事IOC/ID
控制反转：所谓控制反转就是把对象（bean）和维护对象（bean）之间的关系的权利转移到Sqring容器中去了（ApplicationContext.xml）而程序本身不在维护了
依赖注入：实际上DI和IOC是同一个概念，因为在ApplicationContext.xml配置文件中bean和bean之间通过ref来维护的时候是相互依赖的，所以又叫做依赖注入。也就是控制反转。

8.Spring有几种注入方式
	接口注入
	set注入
	构造注入

9.写三个jsp标准动作
 	JSP:forward 把到达的请求转发到另一个页面处理
	JSP:setproperty	设置一个javaBean中的属性值
	JSP:getpropoerty 从javabean获取一个属性值4
	JSP:include 在jsp页面包含一个外在的文件
	JSP:param 用于传递参数

10.用俩种方法构造js对象
   
11.事务的4大隔离级别
	
	Serializable(串行化) :可避免脏读，不可重复读，幻读的发送

	repeatable read:(可重复读) 可避免脏读，不可重复的的发生

	read committed(读已提交):可避免脏读发生

	read uncommitted(读未提交) 最低级别，任何情况都无法保证

12.gc是什么?为什么要用gc

   gc是垃圾回收

   因为内存处理是编程人员最容易出现问题的地方，忘记或者错误的回收会导致程序异常或者崩溃
13.js继承(原型链继承)

14.SpringMVC工作原理
DIspatcherServlet前端控制器
HandlerMapping处理映射器
HandlerAdapter处理器适配器
ViewReslover视图解析器
	1.用户请求发送到前端控制器

	2.前端控制器受到请求调用处理映射器

	3.处理映射器找到具体的处理器，生成处理器对象及处理器拦截器并返回个前端控制器

	4.前端控制器调用处理器适配器
ad
	5.处理器适配器经过适配调用处理器适配器
`
	6.Controller执行完成返回ModelAbdView

	7.处理器适配器将controller执行结果ModeIAndView返回给前端控制器

	8.前端控制器将ModeIAndView传给视图解析器

	9.视图解析器解析后返回具体view

	10.前端控制器根据View进行渲染视图

	11.前端控制器响应用户


15.Spring7种传播行为
	1.required 支持当前事务，如果不存在，就建一个新的

	2.supports 支持当前事务，如果不存在，就不是用事务

	3.mendatory 支持当前事务，如果不存在，就抛出异常

	4.required 如果有事务存在，挂起当前事务。创建一个新事务

	5. not_supported 以非事务方式运行，如果有事务存在，挂起当前事务

	6.never 以非事务方式运行，如果有事务存在，跑出异常

	7.nested 如果当前事务存在，则嵌套事务执行只对DataSource TransactionManager起效


17.Spring实现AOP4种方式

 	1.经典的基于代理的AOP

	2.@AspectJ注解驱动的切面
	3.纯POJO切面

	4.注入式AspectJ切面

18. SpringBean生命周期

Bean的网址生命周期从Spring容器开始实例化bean开始，到销毁，可以从三点来理解


19.写出JNDI连接的关键代码

            Public void doa()throws Exeption{
		Context context=new InitalContext();

		DateSource source=(DateSource)context.loolup("java:comp/env/jdbc/mpl")

		Connection connection=source.getConnection();

		Statement statement=connection.createStatement();

		ResultSet set =Statement.executeQuery("SQL语句")	

		while(set.next){

		}
	
		}



20.用js实现AJAX dome
		
		function ShowInfo(){
		var name =$().val();
		if(name==null||name=="")
		   $().html("不能为空");
		}else{
		//创建xmlhttpRequest对象
		if(window.XMLHttpRequet){
		 //返回true说明是新版本IE或者其他浏览器
		xmlHttpRequset=new XMLTttpRequset();
		}else{
		 xmlhttpRequset=new ActiveXObject("Microsoft.XMLHTTP")
		
		}
		xmlHttprequset.onreadystatechangge=callBack;

		var url="Servlet"

		xmlHttpRequset.opne("POST",url，true);

		var a="name="+name;

		xmlHttprequset.setRequsetHeader("Content-type"，		application/x-www-form-urlencoded);

		xmlHttprequset.send(a);

		function callBack(){
		if(xmlHttprequset.readyState==4
		&&xmlHttprequset.status==200){
			var data=xmlHttprequset.responseText;
		if(data==true){
		 输出背使用
		}else{
		输出可以用
		}
		}
		}

		}





21.什么是Spring

Spring是一个容器，可以接管各个层次的Bean（action/domain/pojo/javabean），并且可以配置bean与bean之间的关系
在java代码里使用bean只需要  用ApplicationContext 的getBean（配置文件里bean的id）方法就可以了